continue
q
@request["request"]
name
q
current_contacts
q
current_contacts.map{ |m| "#{m["first_name"]} #{m["last_name"]}"}.join(", ")
current_contacts.map{ |m| "#{m["first_name"]} #{m["last_name"]}"}
current_contacts.each{ |m| puts "#{m["first_name"]} #{m["last_name"]}"}
current_contacts.count
current_contacts
q
full_name["value"].split.map{ |m| m.capitalize }
full_name["value"].split
full_name
c
contact_action
s
contact_action
request
q
request
q
request
q
request
q
request
continue
response.entries.class
response.entries
response.entries.first
c
response.entries
c
response.entries
q
response.entries
response.methods - Class.methods
response.class
response
c
request
c
s
n
request_in
q
request_in
q
session.query( "UPDATE sensors SET status='1' WHERE name='#{sensor_type}'" )
session.query( "UPDATE sensors SET status='0' WHERE name='#{sensor_type}'" )
session.query( "UPDATE sensors SET status=0 WHERE name=#{sensor_type}" )
session = client.connect
client.query( "UPDATE sensors SET status=0 WHERE name=#{sensor_type}" )
client.connect
client.query
client.methods - Class.methods
client.methods
client.class
c
q
Database.new.connect
Database.connect
c
request["request"]
c
request["request"]
c
request["request"]["type"]
request["request"]
request.keys
request
request.class
c
@application.call("sd")
@application.call("sd)
continue
@application.call("some")
@application.call
@application.methods - Class.methods
@application
continue
n
s
options
s
options
s
arg
s
args
s
n
s
configuration
